// Code generated by mockery v2.27.1. DO NOT EDIT.

package authmocks

import (
	auth "api-gateway/proto/auth"
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceClient is an autogenerated mock type for the AuthServiceClient type
type AuthServiceClient struct {
	mock.Mock
}

// LoginUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) LoginUser(ctx context.Context, in *auth.LoginUserRequest, opts ...grpc.CallOption) (*auth.LoginUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.LoginUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginUserRequest, ...grpc.CallOption) (*auth.LoginUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginUserRequest, ...grpc.CallOption) *auth.LoginUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.LoginUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) RegisterUser(ctx context.Context, in *auth.RegisterUserRequest, opts ...grpc.CallOption) (*auth.RegisterUserResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterUserRequest, ...grpc.CallOption) (*auth.RegisterUserResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterUserRequest, ...grpc.CallOption) *auth.RegisterUserResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RegisterUserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.RegisterUserRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: ctx, in, opts
func (_m *AuthServiceClient) ValidateToken(ctx context.Context, in *auth.ValidateTokenRequest, opts ...grpc.CallOption) (*auth.ValidateTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.ValidateTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ValidateTokenRequest, ...grpc.CallOption) (*auth.ValidateTokenResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ValidateTokenRequest, ...grpc.CallOption) *auth.ValidateTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ValidateTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.ValidateTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthServiceClient creates a new instance of AuthServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthServiceClient(t mockConstructorTestingTNewAuthServiceClient) *AuthServiceClient {
	mock := &AuthServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
